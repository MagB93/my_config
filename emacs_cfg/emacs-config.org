#+TITLE: Emacs configuration
#+DESCRIPTION: An org-babel based emacs configuration
#+LANGUAGE: en
#+PROPERTY: results silent

* General Configuration
** Remove startup welcome screen
 The code block below toggle off the welcome startup screen.

 #+BEGIN_SRC emacs-lisp
    (custom-set-variables
      '(inhibit-startup-screen t))
   ;; Makes *scratch* empty.
   (setq initial-scratch-message "")

   ;; Removes *scratch* from buffer after the mode has been set.
   (defun remove-scratch-buffer ()
     (if (get-buffer "*scratch*")
         (kill-buffer "*scratch*")))
   (add-hook 'after-change-major-mode-hook 'remove-scratch-buffer)

   ;; Removes *messages* from the buffer.
   (setq-default message-log-max nil)
   (kill-buffer "*Messages*")

   ;; Removes *Completions* from buffer after you've opened a file.
   (add-hook 'minibuffer-exit-hook
         '(lambda ()
            (let ((buffer "*Completions*"))
              (and (get-buffer buffer)
                   (kill-buffer buffer)))))

   ;; Don't show *Buffer list* when opening multiple files at the same time.
   (setq inhibit-startup-buffer-menu t)

   ;; Show only one active window when opening multiple files at the same time.
   (add-hook 'window-setup-hook 'delete-other-windows)


 #+END_SRC

** Basic Window Config

#+BEGIN_SRC emacs-lisp
 (tool-bar-mode -1)
 (menu-bar-mode -1)
 (scroll-bar-mode -1)
 (show-paren-mode 1)
 (setq-default indicate-empty-line t)
 (setq visible-bell t)
#+END_SRC


** Indentation
 Always use space instead of tabs
#+BEGIN_SRC emacs-lisp
  (setq-default indent-tabs-mode nil)
  (setq-default tab-width 2)

  ;; Make tab key call the indent command 
  (setq-default tab-always-indent t)

  ;; Make the tab key indent first then completion
  (setq-default tab-always-indent 'complete)

#+END_SRC

** Line-Numbers
#+BEGIN_SRC emacs-lisp
(use-package linum-relative
  :ensure t
  :config
  (global-linum-mode)
  (linum-relative-on)
  (setq linum-relative-current-symbol "")
)

#+END_SRC

** Some advanced highlighting
 #+BEGIN_SRC emacs-lisp
 (use-package rainbow-delimiters
   :ensure t
   :config
   (add-hook 'prog-mode-hook #'rainbow-delimiters-mode)
   (add-hook 'org-mode-hook #'rainbow-delimiters-mode)
 )

 (use-package rainbow-blocks
   :ensure t
   :config
   (add-hook 'prog-mode-hook #'rainbow-blocks-mode)
 )

 (setq-default fill-column 120)
 (use-package fill-column-indicator
   :ensure t
   :config
   (setq fci-rule-width 1)
   (add-hook 'prog-mode-hook 'fci-mode)
 )

 #+END_SRC

** Spaceline
#+BEGIN_SRC emacs-lisp
(use-package spaceline
  :ensure t
  :config
  (spaceline-spacemacs-theme)

)
#+END_SRC

** Smartparens
   Here is only the normal package, the evil-config is in the respective part
   #+BEGIN_SRC emacs-lisp
   (use-package smartparens
    :ensure t
    :config
    (add-hook 'prog-mode-hook 'smartparens-mode)
    (add-hook 'org-mode-hook 'smartparens-mode)
    )
   
   #+END_SRC

** IDO 
   #+BEGIN_SRC emacs-lisp
   (setq ido-enable-flex-matching t)
   (setq ido-everywhere t)
   (ido-mode 1)
   
   #+END_SRC

** Eyebrowse
   #+BEGIN_SRC emacs-lisp
   (use-package eyebrowse
    :ensure t
    :config
    (eyebrowse-mode t)
)
   
   #+END_SRC
* Color theming
** Move the themes '.el' file into the 'themes' folder in the emacs config folder
#+BEGIN_SRC emacs-lisp
  (add-to-list 'custom-theme-load-path "~/.emacs.d/themes/")

  ;; (use-package leuven-theme
  ;;   :ensure t
  ;;   :load-path "themes"
  ;;   :config
  ;;   (load-theme 'leuven t)
  ;; )
  (use-package anti-zenburn-theme
    :ensure t
    :load-path "themes"
    :config 
    (load-theme 'anti-zenburn-theme t)
  )
#+END_SRC

**

* Hasklig
#+BEGIN_SRC emacs-lisp
    ;; nice glyphs for haskell with hasklig
    ;; copied that code from some pastebin, but forgot where
    (custom-set-variables '(haskell-font-lock-symbols t)
                          '(haskell-font-lock-symbols-alist
                            (and (fboundp 'decode-char)
                                (list (cons "&&" (decode-char 'ucs #XE100))
                                      (cons "***" (decode-char 'ucs #XE101))
                                      (cons "*>" (decode-char 'ucs #XE102))
                                      (cons "\\\\" (decode-char 'ucs #XE103))
                                      (cons "||" (decode-char 'ucs #XE104))
                                      (cons "|>" (decode-char 'ucs #XE105))
                                      (cons "::" (decode-char 'ucs #XE106))
                                      (cons "==" (decode-char 'ucs #XE107))
                                      (cons "===" (decode-char 'ucs #XE108))
                                      (cons "==>" (decode-char 'ucs #XE109))
                                      (cons "=>" (decode-char 'ucs #XE10A))
                                      (cons "=<<" (decode-char 'ucs #XE10B))
                                      (cons "!!" (decode-char 'ucs #XE10C))
                                      (cons ">>" (decode-char 'ucs #XE10D))
                                      (cons ">>=" (decode-char 'ucs #XE10E))
                                      (cons ">>>" (decode-char 'ucs #XE10F))
                                      (cons ">>-" (decode-char 'ucs #XE110))
                                      (cons ">-" (decode-char 'ucs #XE111))
                                      (cons "->" (decode-char 'ucs #XE112))
                                      (cons "-<" (decode-char 'ucs #XE113))
                                      (cons "-<<" (decode-char 'ucs #XE114))
                                      (cons "<*" (decode-char 'ucs #XE115))
                                      (cons "<*>" (decode-char 'ucs #XE116))
                                      (cons "<|" (decode-char 'ucs #XE117))
                                      (cons "<|>" (decode-char 'ucs #XE118))
                                      (cons "<$>" (decode-char 'ucs #XE119))
                                      (cons "<>" (decode-char 'ucs #XE11A))
                                      (cons "<-" (decode-char 'ucs #XE11B))
                                      (cons "<<" (decode-char 'ucs #XE11C))
                                      (cons "<<<" (decode-char 'ucs #XE11D))
                                      (cons "<+>" (decode-char 'ucs #XE11E))
                                      (cons ".." (decode-char 'ucs #XE11F))
                                      (cons "..." (decode-char 'ucs #XE120))
                                      (cons "++" (decode-char 'ucs #XE121))
                                      (cons "+++" (decode-char 'ucs #XE122))
                                      (cons "/=" (decode-char 'ucs #XE123))))))

    (defun my-correct-symbol-bounds (pretty-alist)
      "Prepend a TAB character to each symbol in this alist,
  this way compose-region called by prettify-symbols-mode
  will use the correct width of the symbols
  instead of the width measured by char-width."
      (mapcar (lambda (el)
                (setcdr el (string ?\t (cdr el)))
                el)
              pretty-alist))

    (defun my-ligature-list (ligatures codepoint-start)
      "Create an alist of strings to replace with
  codepoints starting from codepoint-start."
      (let ((codepoints (-iterate '1+ codepoint-start (length ligatures))))
        (-zip-pair ligatures codepoints)))

    ; list can be found at https://github.com/i-tu/Hasklig/blob/master/GlyphOrderAndAliasDB#L1588
    (setq my-hasklig-ligatures
      (let* ((ligs '("&&" "***" "*>" "\\\\" "||" "|>" "::"
                     "==" "===" "==>" "=>" "=<<" "!!" ">>"
                     ">>=" ">>>" ">>-" ">-" "->" "-<" "-<<"
                     "<*" "<*>" "<|" "<|>" "<$>" "<>" "<-"
                     "<<" "<<<" "<+>" ".." "..." "++" "+++"
                     "/=" ":::" ">=>" "->>" "<=>" "<=<" "<->")))
        (my-correct-symbol-bounds (my-ligature-list ligs #Xe100))))

    ;; nice glyphs for haskell with hasklig
    (defun my-set-hasklig-ligatures ()
      "Add hasklig ligatures for use with prettify-symbols-mode."
      (setq prettify-symbols-alist
            (append my-hasklig-ligatures prettify-symbols-alist))
      (prettify-symbols-mode))

   (add-hook 'prog-mode-hook 'my-set-hasklig-ligatures)

   (add-to-list 'default-frame-alist '(font . "Hasklig 9") )
   (set-face-attribute 'default t :font "Hasklig 10")

#+END_SRC

* Yasnippet
#+BEGIN_SRC emacs-lisp
(use-package yasnippet
  :ensure t
  :config
  (yas-global-mode 1)
)
(use-package yasnippet-snippets
  :ensure t
)
#+END_SRC
* Magit
#+BEGIN_SRC emacs-lisp
(use-package magit
  :ensure t
)

(use-package git-gutter-fringe
  :ensure t
  :config
  (add-hook 'magit-mode-hook 'git-gutter-mode)
)
#+END_SRC

* EVIL
** Install
Install EVIL (if not yet installed), and enable it.

#+BEGIN_SRC emacs-lisp
(setq evil-want-C-u-scroll 't)
(use-package evil
  :ensure t
  :config
  (evil-mode 1)
)



(use-package evil-commentary
  :ensure t
  :config
  (evil-commentary-mode)
)

(use-package evil-magit
  :ensure t
)

(use-package evil-smartparens
  :ensure t
  :config
  (add-hook 'smart-parens-enabled-hook #'evil-smartparens-mode)
)
#+END_SRC

* Org-Mode
#+BEGIN_SRC emacs-lisp
(use-package org-bullets
    :ensure t
    :config
    (add-hook 'org-mode-hook (lambda() (org-bullets-mode 1)))
)
#+END_SRC

* Projectile
#+BEGIN_SRC emacs-lisp
(use-package projectile
:ensure t
:config
(projectile-mode)
)

#+END_SRC
* Ivy-Config
#+BEGIN_SRC emacs-lisp
(use-package ivy :demand
  :ensure t
  :config
  (setq ivy-use-virtual-buffers t)
	(setq ivy-count-format "%d/%d ")
  (ivy-mode 1)
)
(use-package ivy-xref
  :ensure t
  :init
  (setq xref-show-xrefs-function #'ivy-xref-show-xrefs)
)

(use-package counsel-projectile
  :ensure t
  :config
  (counsel-projectile-mode 1)
)
#+END_SRC

* C/CPP
#+BEGIN_SRC emacs-lisp
(use-package cmake-mode
  :ensure t
  :config
    (setq auto-mode-alist
        (append
        '(("CMakeLists\\.txt\\'" . cmake-mode))
        '(("\\.cmake\\'" . cmake-mode))
        auto-mode-alist))
)

(setq c-default-style "bsd"
      c-basic-offset 2
      )


#+END_SRC

* Lisp
#+BEGIN_SRC emacs-lisp
  ;; (require 'ac-slime)
  (use-package ac-slime
    :ensure t
    :config
    (add-hook 'slime-mode-hook 'set-up-slime-ac)
    (add-hook 'slime-repl-mode-hook 'set-up-slime-ac)
    (eval-after-load "auto-complete" '(add-to-list 'ac-modes 'slime-repl-mode 'emacs-lisp-mode))

    (defun ielm-auto-complete ()
    "Enables `auto-complete' support in \\[ielm]."
    (setq ac-sources '(ac-source-functions
                       ac-source-variables
                       ac-source-features
                       ac-source-symbols
                       ac-source-words-in-same-mode-buffers))
    (add-to-list 'ac-modes 'inferior-emacs-lisp-mode)
    (auto-complete-mode 1))
    (add-hook 'ielm-mode-hook 'ielm-auto-complete)

    (add-hook 'ielm-mode-hook #'enable-paredit-mode)
    (add-hook 'ielm-mode-hook (lambda () (set (make-local-variable 'company-backends) '(company-elisp))))

    (add-hook 'emacs-lisp-mode-hook #'enable-paredit-mode)
    (add-hook 'emacs-lisp-mode-hook (lambda () (set (make-local-variable 'company-backends) '(company-elisp))))
    (add-hook 'emacs-lisp-mode-hook 'ielm-auto-complete)
  )
#+END_SRC
* Language-Server-Settings


** Basic settings

#+BEGIN_SRC emacs-lisp
    (use-package lsp-mode
        :ensure t
        :defer t
        :config
        (lsp-define-stdio-client
        ;; This can be a symbol of your choosing. It will be used as a the
        ;; prefix for a dynamically generated function "-enable"; in this
        ;; case: lsp-prog-major-mode-enable
        lsp-prog-major-mode
        "language-id"
        ;; This will be used to report a project's root directory to the LSP
        ;; server.
        (lambda () default-directory)
        ;; This is the command to start the LSP server. It may either be a
        ;; string containing the path of the command, or a list wherein the
        ;; car is a string containing the path of the command, and the cdr
        ;; are arguments to that command.
        '("/my/lsp/server" "and" "args"))

        ;; Here we'll add the function that was dynamically generated by the
        ;; call to lsp-define-stdio-client to the major-mode hook of the
        ;; language we want to run it under.
        ;;
        ;; This function will turn lsp-mode on and call the command given to
        ;; start the LSP server.
        (add-hook 'prog-major-mode #'lsp-prog-major-mode-enable)
        (add-hook 'lsp-after-open-hook 'lsp-enable-imenu)
    )

    (use-package lsp-ui
     :ensure t
     :init
     (add-hook 'lsp-mode-hook 'lsp-ui-mode)

    )

  (use-package company
    :ensure t
    :init
    (add-hook 'after-init-hook 'global-company-mode)
    :config
    (setq company-idle-delay 0.2)
    (setq company-selection-wrap-around t)
    (define-key company-active-map [tab] 'company-complete)
    (define-key company-active-map (kbd "C-n") 'company-select-next)
    (define-key company-active-map (kbd "C-p") 'company-select-previous)
  )

  (use-package company-lsp
    :ensure t
    :init
    (push 'company-lsp company-backends)
  )


#+END_SRC
** Cquery
#+BEGIN_SRC emacs-lisp
  (defun cquery//enable ()
    (condition-case nil
        (lsp-cquery-enable)
      (user-error nil)))
  (use-package cquery
    :ensure t
    :defer t
    :commands lsp-cquery-enable
    :init (add-hook 'c-mode-common-hook #'cquery//enable)
    :config
      (setq cquery-executable "~/opt/cquery/build/release/bin/cquery")

      (add-hook 'xref-backend-functions 'lsp--xref-backend)
      (add-hook 'completion-at-point-functions' lsp-completion-at-point)

      ;; Log file
      (setq cquery-extra-args '("--log-file=/tmp/cq.log"))

      ;; Cache directory, both relative and absolute paths are supported
      (setq cquery-cache-dir "~/.cache/cquery")

      ;; Initialization options
      (setq cquery-extra-init-params '(:index (:comment 2) :cacheFormat "msgpack" :completion (:detailedLabel t)))

      ;; Better ui
      (define-key evil-normal-state-map (kbd "C-p") 'lsp-ui-peek-jump-forward)
      (define-key evil-normal-state-map (kbd "C-t") 'lsp-ui-peek-jump-backward)

      (cquery-xref-find-custom "$cquery/base")
      (cquery-xref-find-custom "$cquery/callers")
      (cquery-xref-find-custom "$cquery/derived")
      (cquery-xref-find-custom "$cquery/vars")

      ;; Company completion
      (setq company-transformers nil company-lsp-async t company-lsp-cache-candidates nil)

      ;; Semantic highlighting
      (setq cquery-sem-highlight-method 'font-lock)

      ;; For rainbow semantic highlighting
      (cquery-use-default-rainbow-sem-highlight)
      (cquery-call-hierarchy nil) ; caller hierarchy
      (cquery-call-hierarchy t) ; callee hierarchy
      (cquery-inheritance-hierarchy nil) ; base hierarchy
      (cquery-inheritance-hierarchy t) ; derived hierarchy
      (add-hook 'cpp-mode-hook #'lsp-cquery-enable)
  )
#+END_SRC

** TODO Julia

#+BEGIN_SRC emacs-lisp
(use-package julia-mode
  :ensure t
)
#+END_SRC
