#+TITLE: Emacs configuration
#+DESCRIPTION: An org-babel based emacs configuration
#+LANGUAGE: en
#+PROPERTY: results silent

* General Configuration
** Remove startup welcome screen
 The code block below toggle off the welcome startup screen.

 #+BEGIN_SRC emacs-lisp
 (custom-set-variables
   '(inhibit-startup-screen t))
 #+END_SRC

** Basic Window Config

#+BEGIN_SRC emacs-lisp
 (tool-bar-mode -1)
 (menu-bar-mode -1)
 (scroll-bar-mode -1)
 (show-paren-mode 1)
 (setq-default indicate-empty-line t)
 (setq visible-bell t)
#+END_SRC


** Indentation
 Always use space instead of tabs
#+BEGIN_SRC emacs-lisp
  (setq-default indent-tabs-mode nil)
  (setq-default tab-width 2)

  ;; Make tab key call the indent command or insert tab character, depending on the cursor position
  (setq-default tab-always-indent nil)

  ;; Make the tab key indent first then completion
  ;; (setq-default tab-always-indent 'complete)

#+END_SRC

** Line-Numbers
#+BEGIN_SRC emacs-lisp
(use-package linum-relative
  :ensure t
  :config
  (global-linum-mode)
  (linum-relative-on)
)

#+END_SRC

** Some advanced highlighting
 #+BEGIN_SRC emacs-lisp
 (use-package rainbow-delimiters
   :ensure t
   :config
   (add-hook 'prog-mode-hook #'rainbow-delimiters-mode)
   (add-hook 'org-mode-hook #'rainbow-delimiters-mode)
 )

 (use-package rainbow-blocks
   :ensure t
   :config 
   (add-hook 'prog-mode-hook #'rainbow-blocks-mode)
 )

 #+END_SRC

** Spaceline
#+BEGIN_SRC emacs-lisp
(use-package spaceline
  :ensure t
  :config 
  (spaceline-spacemacs-theme)
  
)
#+END_SRC

* Yasnippet
#+BEGIN_SRC emacs-lisp
(use-package yasnippet
  :ensure t
  :config
  (yas-global-mode 1)
)
(use-package yasnippet-snippets
  :ensure t
)
#+END_SRC
* Magit
#+BEGIN_SRC emacs-lisp
(use-package magit
  :ensure t
)
#+END_SRC

* EVIL
** Install
Install EVIL (if not yet installed), and enable it.

#+BEGIN_SRC emacs-lisp
(setq evil-want-C-u-scroll 't)
(use-package evil
  :ensure t
  :config
  (evil-mode 1)
)

(use-package evil-commentary
  :ensure t
  :config 
  (evil-commentary-mode)
)

(use-package evil-magit
  :ensure t
)
#+END_SRC

* Org-Mode
#+BEGIN_SRC emacs-lisp
(use-package org-bullets
    :ensure t
    :config
    (add-hook 'org-mode-hook (lambda() (org-bullets-mode 1)))
)
#+END_SRC

* Projectile
#+BEGIN_SRC emacs-lisp
(use-package projectile 
:ensure t
:config
(projectile-mode)
)

#+END_SRC
* Ivy-Config
#+BEGIN_SRC emacs-lisp
(use-package ivy :demand
  :ensure t
  :config
  (setq ivy-use-virtual-buffers t)
	(setq ivy-count-format "%d/%d ")
  (ivy-mode 1)
)
(use-package ivy-xref
  :ensure t
  :init
  (setq xref-show-xrefs-function #'ivy-xref-show-xrefs)
)

(use-package counsel-projectile
  :ensure t
  :config
  (counsel-projectile-mode 1)
)
#+END_SRC

* C/CPP 
#+BEGIN_SRC emacs-lisp

#+END_SRC

* Lisp
#+BEGIN_SRC emacs-lisp
  ;; (require 'ac-slime)
  (use-package ac-slime
    :ensure t
    :config
    (add-hook 'slime-mode-hook 'set-up-slime-ac)
    (add-hook 'slime-repl-mode-hook 'set-up-slime-ac)
    (eval-after-load "auto-complete" '(add-to-list 'ac-modes 'slime-repl-mode 'emacs-lisp-mode))

    (defun ielm-auto-complete ()                               
    "Enables `auto-complete' support in \\[ielm]."           
    (setq ac-sources '(ac-source-functions                   
                       ac-source-variables                   
                       ac-source-features                    
                       ac-source-symbols                     
                       ac-source-words-in-same-mode-buffers))
    (add-to-list 'ac-modes 'inferior-emacs-lisp-mode)        
    (auto-complete-mode 1))                                  
    (add-hook 'ielm-mode-hook 'ielm-auto-complete)

    (add-hook 'ielm-mode-hook #'enable-paredit-mode)
    (add-hook 'ielm-mode-hook (lambda () (set (make-local-variable 'company-backends) '(company-elisp))))

    (add-hook 'emacs-lisp-mode-hook #'enable-paredit-mode)
    (add-hook 'emacs-lisp-mode-hook (lambda () (set (make-local-variable 'company-backends) '(company-elisp))))
    (add-hook 'emacs-lisp-mode-hook 'ielm-auto-complete)
  )
#+END_SRC
* Language-Server-Settings


** Basic settings

#+BEGIN_SRC emacs-lisp
    (use-package lsp-mode
        :ensure t
        :defer t
        :config
        (lsp-define-stdio-client
        ;; This can be a symbol of your choosing. It will be used as a the
        ;; prefix for a dynamically generated function "-enable"; in this
        ;; case: lsp-prog-major-mode-enable
        lsp-prog-major-mode
        "language-id"
        ;; This will be used to report a project's root directory to the LSP
        ;; server.
        (lambda () default-directory)
        ;; This is the command to start the LSP server. It may either be a
        ;; string containing the path of the command, or a list wherein the
        ;; car is a string containing the path of the command, and the cdr
        ;; are arguments to that command.
        '("/my/lsp/server" "and" "args"))

        ;; Here we'll add the function that was dynamically generated by the
        ;; call to lsp-define-stdio-client to the major-mode hook of the
        ;; language we want to run it under.
        ;;
        ;; This function will turn lsp-mode on and call the command given to
        ;; start the LSP server.
        (add-hook 'prog-major-mode #'lsp-prog-major-mode-enable)
    )

    (use-package lsp-ui
     :ensure t
     :init 
     (add-hook 'lsp-mode-hook 'lsp-ui-mode)

    )

  (use-package company
    :ensure t
    :init 
    (add-hook 'after-init-hook 'global-company-mode)
  )

  (use-package company-lsp
    :ensure t
    :init
    (push 'company-lsp company-backends)
  )

  ;; (use-package lsp-imenu
  ;;   :ensure t
  ;;   :init
  ;;   (add-hook 'lsp-after-open-hook 'lsp-enable-imenu)
  ;; )

#+END_SRC
** Cquery
#+BEGIN_SRC emacs-lisp
  (defun cquery//enable ()
    (condition-case nil
        (lsp-cquery-enable)
      (user-error nil)))
  (use-package cquery
    :ensure t
    :defer t
    :commands lsp-cquery-enable
    :init (add-hook 'c-mode-common-hook #'cquery//enable))
    :config
      (setq cquery-executable "~/opt/cquery/build/release/bin/cquery")

      ;; Log file
      (setq cquery-extra-args '("--log-file=/tmp/cq.log"))

      ;; Cache directory, both relative and absolute paths are supported
      (setq cquery-cache-dir "~/.cache/cquery")

      ;; Initialization options
      (setq cquery-extra-init-params '(:index (:comment 2) :cacheFormat "msgpack" :completion (:detailedLabel t)))

      ;; Better ui
      (define-key evil-normal-state-map (kbd "C-p") 'lsp-ui-peek-jump-forward)
      (define-key evil-normal-state-map (kbd "C-t") 'lsp-ui-peek-jump-backward)

      ;; (cquery-xref-find-custom "$cquery/base")
      ;; (cquery-xref-find-custom "$cquery/callers")
      ;; (cquery-xref-find-custom "$cquery/derived")
      ;; (cquery-xref-find-custom "$cquery/vars")

      ;; Company completion
      (setq company-transformers nil company-lsp-async t company-lsp-cache-candidates nil)

      ;; Semantic highlighting
      (setq cquery-sem-highlight-method 'font-lock)

      ;; For rainbow semantic highlighting
      (cquery-use-default-rainbow-sem-highlight)
      (cquery-call-hierarchy nil) ; caller hierarchy
      (cquery-call-hierarchy t) ; callee hierarchy
      (cquery-inheritance-hierarchy nil) ; base hierarchy
      (cquery-inheritance-hierarchy t) ; derived hierarchy
  )
#+END_SRC

** TODO Julia

#+BEGIN_SRC emacs-lisp
(use-package julia-mode
  :ensure t
)
#+END_SRC

* Color theming
** Move the themes '.el' file into the 'themes' folder in the emacs config folder
#+BEGIN_SRC emacs-lisp
(add-to-list 'custom-theme-load-path "~/.emacs.d/themes/")
#+END_SRC
**
